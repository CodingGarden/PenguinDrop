{% extends 'layout.twig' %}

{% block body %}
	<div id="penguindrop"></div>
	<script>
		var config = {
			type: Phaser.AUTO,
			width: 1280,
			height: 800,
			transparent: true,
			parent: 'penguindrop',
			physics: {
					default: 'arcade',
					arcade: {
							// debug: true,
							gravity: { y: 0 }
					}
			},
			scene: {
					preload: preload,
					create: create,
					update: update
			}
		};

		var game = new Phaser.Game(config);
		var phaser = undefined;
		var blocks = [];
		var collisions;
		var balls = {};
		var walls = [];
		var star;
		var winners = {};
		var winnerText;
		var refreshTimer = null;
		var emoteList = {};
		var paraList = {};

		function preload ()
		{
			this.load.image('waddles', 'images/waddles.png');
			this.load.image('piddles', 'images/piddles.png');
			this.load.image('parachute', 'images/parachute.png');
			this.load.image('target', 'images/target.png');
		}

		function create ()
		{
			phaser = this;
			this.game.antialias = true;
			this.game.clearBeforeRender = true;
			winnerText = this.add.text( 500, 100, "Winners!" );
			winnerText.setScale( 2 );
			startGame();
		}

		function update() {
			for( var marble in balls ) {
				var marbleObj = balls[ marble ];
				marbleObj.text.x = marbleObj.object.x - 16;
				marbleObj.text.y = marbleObj.object.y - 100;

				if( marbleObj.object.y > 300 ) {
					marbleObj.object.body.velocity.y = 50;
					if( !paraList[ marbleObj.object.name ] ) {
						paraList[ marbleObj.object.name ] = phaser.add.image( marbleObj.object.x - 8, marbleObj.object.y - 32, "parachute" );
						marbleObj.object.setDepth(1);
					}
					paraList[ marbleObj.object.name ].x = marbleObj.object.x - 8;
					paraList[ marbleObj.object.name ].y = marbleObj.object.y - 32;
					console.log( paraList[ marbleObj.object.name ] );
					paraList[ marbleObj.object.name ].angle = Math.sin( marbleObj.object.y / 20 ) * 10;
				}

				if( marbleObj.object.y > 730 ) {
					if( Math.abs( marbleObj.object.x - 640 ) < 128 ) {
						// POINTS AWARDED!
						if( !winners[ marbleObj.object.name ] ) {
							var points = ( 128 - Math.abs( marbleObj.object.x - 640 ) ).toFixed(2);
							winners[ marbleObj.object.name ] = points;
							client.say("#{{ username }}", "/me " + marbleObj.object.name + " landed for " + points + "!" );
							console.log( Object.keys( winners ) );
							var leaderboard = Object.keys( winners );
							leaderboard.sort( (a, b) => winners[ b ] - winners[ a ] );
							winnerText.setText( "Winners!\n" + leaderboard.map( x => winners[ x ] + " : " + x ).join( "\n" ) );
						}
					}
					marbleObj.object.body.velocity.x = 0;
					marbleObj.object.body.velocity.y = 0;
					marbleObj.object.body.enable = false;
					console.log( marbleObj.object.body );
					paraList[ marbleObj.object.name ].destroy();
					delete paraList[ marbleObj.object.name ];
				}
			}
		}

		function startGame() {
			collisions = phaser.physics.add.group({
				bounceX: 0.95, bounceY: 0.6,
				// bounceX: 1, bounceY: 1,
				collideWorldBounds: true
			});
			var target = phaser.add.image( 640, 740, "target" );
		}

		function addUser( username, emote = "" ) {
			var marbleImage = Math.random() < 0.5 ? "waddles" : "piddles";
			var marbleScale = 1;
			if( emote ) {
				if( !emoteList[ emote ] ) {
					emoteList[ emote ] = true;
					var emoteUrl = "https://static-cdn.jtvnw.net/emoticons/v1/" + emote + "/3.0";
					phaser.load.image( "emote_" + emote, emoteUrl );
					phaser.load.start();
					setTimeout( () => {
						if( !balls[ username ] ) {
							addUser( username, emote );
						}
					}, 500 );
					return;
				}
				marbleImage = "emote_" + emote;
				marbleScale = 0.5;
			}
			if( !balls[ username ] ) {
				var dropPosition = getRandomInt(768);
				// var userMarble = phaser.physics.add.image(dropPosition, 65, 'wizball');
				var userMarble = collisions.create(dropPosition, -165, marbleImage);
				var userText = phaser.add.text(dropPosition, -190, username);
				userText.setOrigin( 0.5 );
				userMarble.name = username;
				userMarble.setScale( marbleScale );
				if( marbleScale < 1 ) {
					userMarble.setOrigin( 0.5 );
					userMarble.setCircle( 32 / marbleScale );
				}
				else {
					userMarble.setOrigin( 0.6 );
					userMarble.setCircle( 32 );
				}
				console.log( userMarble );
				userMarble.setDrag( 0, 0 );
				userMarble.body.allowDrag = false;
				// userMarble.body.stopVelocityOnCollide = false;
				userMarble.allowRotation = true;
				// userMarble.setMass( 10 );
				// userMarble.setCollideWorldBounds(true);
				// userMarble.setBounce(1);
				userMarble.setVelocity(getRandomInt(600)-30, 1000);
				balls[ username ] = {
					text: userText,
					object: userMarble
				}
			}
		}

		function getRandomInt(max) {
		  return Math.floor(Math.random() * Math.floor(max));
		}

		var client = null;

		$( document ).ready(function() {
			$("#penguindrop").hide();

			var options = {
				options: {
					debug: false
				},
				connection: {
					reconnect: true,
				},
				identity: {
					username: "{{ username }}",
				    password: "{{ oauth }}"
				},
				channels: ["#{{ username }}"]
			};

			client = new tmi.client(options);

			// Connect the client to the server..
			client.connect();

			client.on("chat", function (channel, userstate, message, self) {
				if( message == "!drop" || message.startsWith( "!drop " ) ) {
					addUser( userstate["display-name"], userstate.emotes ? Object.keys( userstate.emotes )[ 0 ] : "" );

					$("#penguindrop").show();
					if( refreshTimer ) {
						clearTimeout( refreshTimer );
					}
					refreshTimer = setTimeout(() => {
						location.reload();
					}, 90000);
				}
				if( channel == "#" + userstate[ "username" ] ) {
					if( message == "!resetdrop" ) {
						location.reload();
					}
				}
			});
		});
	</script>
{% endblock %}
